%implements s0_b0_hwl2p_Start "C"

%function Start(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

CXPtMax *_rtXPerturbMax;
CXPtMin *_rtXPerturbMin;
NeModelParameters modelParameters;
NeModelParameters modelParameters_p;
NeslSimulationData *simulationData;
NeslSimulator *tmp;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
NeuDiagnosticTree *diagnosticTree_e;
NeuDiagnosticTree *diagnosticTree_p;
char *msg;
char *msg_e;
char *msg_p;
real_T tmp_m[4];
real_T time;
real_T tmp_e;
int32_T tmp_i;
int_T tmp_g[2];
boolean_T tmp_p;
boolean_T val;
%closefile localVarDecl
%assign tlcSetupRuntimeResourcesFcnOfS0B0 = OpaqueTLCBlockFcn("SetupRuntimeResources", 0, 0, 0, 0, 0)
%<SLibCG_TrackContStatesPerturbMax(0)>\
_rtXPerturbMax = %<(SLibCG_SE(SLibGetContStatesPerturbMaxStructPtr()))>;
%<SLibCG_TrackContStatesPerturbMin(0)>\
_rtXPerturbMin = %<(SLibCG_SE(SLibGetContStatesPerturbMinStructPtr()))>;
%<tlcSetupRuntimeResourcesFcnOfS0B0>\
tmp = nesl_lease_simulator("Nicholas_DCDC_Buck/Solver Configuration_1", 0, 0);
rtDW.dh43lcbaln = (void *)tmp;
tmp_p = pointer_is_null(rtDW.dh43lcbaln);
if (tmp_p) {
    Nicholas_DCDC_Buck_d41060f2_1_gateway();
    tmp = nesl_lease_simulator("Nicholas_DCDC_Buck/Solver Configuration_1", 0, 0);
    rtDW.dh43lcbaln = (void *)tmp;
}
%<(SaveDWorkRawMemoryForSimTargetOP("\"Nicholas_DCDC_Buck/Solver Configuration_100\"", "rtDW.dh43lcbaln", "0U", "nesl_save_simdata", "nesl_restore_simdata"))>;
simulationData = nesl_create_simulation_data();
rtDW.n1pn1b4isz = (void *)simulationData;
diagnosticManager = rtw_create_diagnostics();
rtDW.i5puujzelw = (void *)diagnosticManager;
modelParameters.mSolverType = NE_SOLVER_TYPE_DAE;
modelParameters.mSolverTolerance = 0.001;
modelParameters.mVariableStepSolver = true;
modelParameters.mIsUsingODEN = false;
modelParameters.mFixedStepSize = 0.001;
modelParameters.mStartTime = 0.0;
modelParameters.mLoadInitialState = false;
modelParameters.mUseSimState = false;
modelParameters.mLinTrimCompile = false;
modelParameters.mLoggingMode = SSC_LOGGING_NONE;
modelParameters.mRTWModifiedTimeStamp = 5.57875547E+8;
modelParameters.mZcDisabled = false;
tmp_e = %<(SLibCG_SE(SLibCGIRGetVarStepSolverPropertyValue("RelTol", "0.001")))>;
modelParameters.mSolverTolerance = tmp_e;
tmp_e = %<(SLibCG_SE(SLibCGIRGetFixStepSolverPropertyValue("FixedStep", "0.0")))>;
modelParameters.mFixedStepSize = tmp_e;
tmp_p = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("SolverType", "VariableStep")))>;
modelParameters.mVariableStepSolver = tmp_p;
tmp_p = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("Solver", "odeN")))>;
modelParameters.mIsUsingODEN = tmp_p;
val = false;
tmp_p = %<(SLibCG_SE(SLibIsRapidAccelSimulating()))>;
if (tmp_p) {
    tmp_p = %<(SLibCG_SE(RTMGetGlobalInitialStatesAvailable()))>;
    val = (tmp_p && %<(SLibCG_SE(LibIsFirstInitCond()))>);
}
modelParameters.mLoadInitialState = val;
modelParameters.mZcDisabled = false;
diagnosticManager = (NeuDiagnosticManager *)rtDW.i5puujzelw;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_i = nesl_initialize_simulator((NeslSimulator *)rtDW.dh43lcbaln, &modelParameters, diagnosticManager);
if (tmp_i != 0) {
    tmp_p = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp_p) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulationData = (NeslSimulationData *)rtDW.n1pn1b4isz;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 8;
simulationData->mData->mContStates.mX = &rtX.fqg3sarkwh[0];
simulationData->mData->mDiscStates.mN = 28;
simulationData->mData->mDiscStates.mX = &rtDW.bxat0p1hh2[0];
simulationData->mData->mModeVector.mN = 17;
simulationData->mData->mModeVector.mX = &rtDW.g34sz5deau[0];
tmp_p = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = tmp_p;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
tmp_p = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = tmp_p;
tmp_p = %<(SLibCG_SE(RTMIsSolverCheckingCIC()))>;
simulationData->mData->mIsSolverCheckingCIC = tmp_p;
tmp_p = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = tmp_p;
simulationData->mData->mIsEvaluatingF0 = (%<(SLibCG_SE(RTMGetEvaluatingF0ForJacobian()))> != 0);
tmp_p = %<(SLibCG_SE(RTMIsSolverRequestingReset()))>;
simulationData->mData->mIsSolverRequestingReset = tmp_p;
tmp_p = %<(SLibCG_SE(RTMGetIsOkayToUpdateMode()))>;
simulationData->mData->mIsOkayToUpdateMode = tmp_p;
tmp_g[0] = 0;
tmp_m[0] = rtB.ms13at0w2f[0];
tmp_m[1] = rtB.ms13at0w2f[1];
tmp_m[2] = rtB.ms13at0w2f[2];
tmp_m[3] = rtB.ms13at0w2f[3];
tmp_g[1] = 4;
simulationData->mData->mInputValues.mN = 4;
simulationData->mData->mInputValues.mX = &tmp_m[0];
simulationData->mData->mInputOffsets.mN = 2;
simulationData->mData->mInputOffsets.mX = &tmp_g[0];
simulationData->mData->mNumjacDxLo.mN = 8;
simulationData->mData->mNumjacDxLo.mX = &_rtXPerturbMin->fqg3sarkwh[0];
simulationData->mData->mNumjacDxHi.mN = 8;
simulationData->mData->mNumjacDxHi.mX = &_rtXPerturbMax->fqg3sarkwh[0];
diagnosticManager = (NeuDiagnosticManager *)rtDW.i5puujzelw;
diagnosticTree_p = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_i = ne_simulator_method((NeslSimulator *)rtDW.dh43lcbaln, NESL_SIM_NUMJAC_DX_BOUNDS, simulationData, diagnosticManager);
if (tmp_i != 0) {
    tmp_p = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp_p) {
        msg_p = rtw_diagnostics_msg(diagnosticTree_p);
        %<(LibSetRTModelErrorStatus("msg_p"))>;
    }
}
tmp = nesl_lease_simulator("Nicholas_DCDC_Buck/Solver Configuration_1", 1, 0);
rtDW.icaypvch4x = (void *)tmp;
tmp_p = pointer_is_null(rtDW.icaypvch4x);
if (tmp_p) {
    Nicholas_DCDC_Buck_d41060f2_1_gateway();
    tmp = nesl_lease_simulator("Nicholas_DCDC_Buck/Solver Configuration_1", 1, 0);
    rtDW.icaypvch4x = (void *)tmp;
}
%<(SaveDWorkRawMemoryForSimTargetOP("\"Nicholas_DCDC_Buck/Solver Configuration_110\"", "rtDW.icaypvch4x", "0U", "nesl_save_simdata", "nesl_restore_simdata"))>;
simulationData = nesl_create_simulation_data();
rtDW.p5jryn5z3x = (void *)simulationData;
diagnosticManager = rtw_create_diagnostics();
rtDW.o5o0pcluu0 = (void *)diagnosticManager;
modelParameters_p.mSolverType = NE_SOLVER_TYPE_DAE;
modelParameters_p.mSolverTolerance = 0.001;
modelParameters_p.mVariableStepSolver = true;
modelParameters_p.mIsUsingODEN = false;
modelParameters_p.mFixedStepSize = 0.001;
modelParameters_p.mStartTime = 0.0;
modelParameters_p.mLoadInitialState = false;
modelParameters_p.mUseSimState = false;
modelParameters_p.mLinTrimCompile = false;
modelParameters_p.mLoggingMode = SSC_LOGGING_NONE;
modelParameters_p.mRTWModifiedTimeStamp = 5.57875547E+8;
modelParameters_p.mZcDisabled = false;
tmp_e = %<(SLibCG_SE(SLibCGIRGetVarStepSolverPropertyValue("RelTol", "0.001")))>;
modelParameters_p.mSolverTolerance = tmp_e;
tmp_e = %<(SLibCG_SE(SLibCGIRGetFixStepSolverPropertyValue("FixedStep", "0.0")))>;
modelParameters_p.mFixedStepSize = tmp_e;
tmp_p = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("SolverType", "VariableStep")))>;
modelParameters_p.mVariableStepSolver = tmp_p;
tmp_p = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("Solver", "odeN")))>;
modelParameters_p.mIsUsingODEN = tmp_p;
val = false;
tmp_p = %<(SLibCG_SE(SLibIsRapidAccelSimulating()))>;
if (tmp_p) {
    tmp_p = %<(SLibCG_SE(RTMGetGlobalInitialStatesAvailable()))>;
    val = (tmp_p && %<(SLibCG_SE(LibIsFirstInitCond()))>);
}
modelParameters_p.mLoadInitialState = val;
modelParameters_p.mZcDisabled = false;
diagnosticManager = (NeuDiagnosticManager *)rtDW.o5o0pcluu0;
diagnosticTree_e = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_i = nesl_initialize_simulator((NeslSimulator *)rtDW.icaypvch4x, &modelParameters_p, diagnosticManager);
if (tmp_i != 0) {
    tmp_p = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp_p) {
        msg_e = rtw_diagnostics_msg(diagnosticTree_e);
        %<(LibSetRTModelErrorStatus("msg_e"))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedStartLocalVars", localVarDecl)>
%endfunction
%function StartFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Start(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%endfunction
